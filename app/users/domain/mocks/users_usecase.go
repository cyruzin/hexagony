// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hexagony/app/users/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, user
func (_m *UserUseCase) Add(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, _a1
func (_m *UserUseCase) Delete(ctx context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *UserUseCase) FindAll(ctx context.Context) ([]*domain.User, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.User
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, _a1
func (_m *UserUseCase) FindByID(ctx context.Context, _a1 uuid.UUID) (*domain.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1, user
func (_m *UserUseCase) Update(ctx context.Context, _a1 uuid.UUID, user *domain.UserUpdate) error {
	ret := _m.Called(ctx, _a1, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.UserUpdate) error); ok {
		r0 = rf(ctx, _a1, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewUserUseCaseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t NewUserUseCaseT) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
